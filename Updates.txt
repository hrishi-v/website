JavaScript resource:

To best simulate a industry-standard development workflow, we are using a GitHub repository to both keep each other updated on progress, 
and staying motivated. In addition to this, I have created a Markdown file including important syntax and techniques to employ in JavaScript, 
as a mean to refresh myself before moving onto learning React. This is something that I can share once the project is more fleshed out, 
in a future post.

Developing the Register and Login webpages:

This was the first hiccup that I came across, wherein I was experimenting with the React Router module, where I was aiming to make the 
Register button redirect me to the Login page - a very primitive task, with no actual checks for password length, valid emails etc.
Wrapping the root.render in the main.jsx file, would cause the Login page to disappear, need a method to select a landing page. I
resolved  this by utilising the React Router library and assigning paths to each webpage created.

The next major dilemma I had was whether or not to use the Navbar from the React Bootstrap library. At first, I developed the webpages with the Navbar,
but found that it was restrictive in regards to appearance and customizability, so I moved to a navbar constructed from scratch HTML and CSS, allowing
for more creative control, as well as an opportunity to learn HTML and CSS concepts. 

Shop to Cart:

When items are added to the cart from the shop, the array of cart items was updated by the product component, and it was received by the shop context as well,
but was not reflecting into the cart component when displayed on the website, the fix for this took the longest amount of time to rectify. The fix for this was seemingly
unrelated, I was using the React Bootstrap library for the navbar, and using Nav.Link for the links from Cart to Shop, and that was causing the router to reset the 
cart contents everytime the page was switched, I will do more research on this to gain a better understanding of it, but for now, switching from using Nav.Link from React
Bootstrap to Link from the React Router DOM library has resolved the issue.

Early prediction is that because the navigation between the pages was done through the Router, and the Navbar was not using that library, they weren't interacting how they
should be.